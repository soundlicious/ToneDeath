apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

android {
    signingConfigs {
        release
    }
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        applicationId "dev.expositopablo.tonedeath"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }
    buildTypes {
        debug {
            minifyEnabled false
            buildConfigField "String", "ADMOB_TOKEN", "${rootProject.ext.adMobAppToken}"
            buildConfigField "String", "ADMOB_RECOMPENSE_TOKEN", "${rootProject.ext.adMobRecompenseAppTokenTest}"
            resValue "string", "ADMOB_BANNER_TOKEN", "${rootProject.ext.adMobBannerAppTokenTest}"
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "ADMOB_TOKEN", "${rootProject.ext.adMobAppToken}"
            buildConfigField "String", "ADMOB_RECOMPENSE_TOKEN", "${rootProject.ext.adMobRecompenseAppToken}"
            resValue "string", "ADMOB_BANNER_TOKEN", "${rootProject.ext.adMobBannerAppToken}"
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    defaultConfig {
        manifestPlaceholders = [fabric_api_key: "${rootProject.ext.fabricApiKey}"]
    }
}

ext.setKeystore = { keystore ->
    def keyStoreConfigFile = rootProject.file(keystore)
    def configName = 'release'

    if (keyStoreConfigFile.exists() && android.signingConfigs.hasProperty(configName)) {
        def keyStoreProperties = new Properties()
        keyStoreProperties.load(new FileInputStream(keyStoreConfigFile))
        android.signingConfigs[configName].storeFile = file(keyStoreProperties['storeFile'])
        android.signingConfigs[configName].storePassword = keyStoreProperties['storePassword']
        android.signingConfigs[configName].keyAlias = keyStoreProperties['keyAlias']
        android.signingConfigs[configName].keyPassword = keyStoreProperties['keyPassword']
    }
}

allprojects {
    afterEvaluate { project ->
        if (System.getenv("CIRCLECI") || System.getenv("TRAVIS")) {
            setKeystore('keystore-debug.properties')
        }
        else {
            setKeystore('keystore.properties')
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    rootProject.ext.dependencies.each {
        add(it.configuration, it.dependency, it.options)
    }
}

apply plugin: 'com.google.gms.google-services'
