apply plugin: 'com.android.application'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'
apply plugin: 'io.fabric'

android {
    signingConfigs {
        release
    }
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        applicationId "dev.expositopablo.tonedeath"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }
    buildTypes {
        debug {
            minifyEnabled false
            buildConfigField "String", "ADMOB_TOKEN", "${rootProject.ext.adMobAppToken}"
            buildConfigField "String", "ADMOB_RECOMPENSE_TOKEN", "${rootProject.ext.adMobRecompenseAppTokenTest}"
            resValue "string", "ADMOB_BANNER_TOKEN", "${rootProject.ext.adMobBannerAppTokenTest}"
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "ADMOB_TOKEN", "${rootProject.ext.adMobAppToken}"
            buildConfigField "String", "ADMOB_RECOMPENSE_TOKEN", "${rootProject.ext.adMobRecompenseAppToken}"
            resValue "string", "ADMOB_BANNER_TOKEN", "${rootProject.ext.adMobBannerAppToken}"
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    defaultConfig {
        manifestPlaceholders = [fabric_api_key: "${rootProject.ext.fabricApiKey}"]
    }
}
ext.setSigningConfig = { storeFile, storePassword, keyAlias, keyPassword ->
    def configName = 'release'
    if (android.signingConfigs.hasProperty(configName)) {
        android.signingConfigs[configName].storeFile = storeFile
        android.signingConfigs[configName].storePassword = storePassword
        android.signingConfigs[configName].keyAlias = keyAlias
        android.signingConfigs[configName].keyPassword = keyPassword
    }
}

allprojects {
    afterEvaluate { project ->
        if (System.getenv("TRAVIS") != null) {
            setSigningConfig(file('keystore-release-debug.jks'), System.getenv('STORE_PASSWORD'),
                    System.getenv('KEY_ALIAS'), System.getenv('KEY_PASSWORD'))
        } else {
            def keyStoreConfigFile = rootProject.file('keystore.properties')
            if (keyStoreConfigFile.exists()) {
                def keyStoreProperties = new Properties()
                keyStoreProperties.load(new FileInputStream(keyStoreConfigFile))
                setSigningConfig(file(keyStoreProperties['storeFile']), keyStoreProperties['storePassword'],
                        keyStoreProperties['keyAlias'], keyStoreProperties['keyPassword'])
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    rootProject.ext.dependencies.each {
        add(it.configuration, it.dependency, it.options)
    }
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

apply plugin: 'com.google.gms.google-services'
repositories {
    mavenCentral()
}